#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "../defines.h"

layout(std430, binding = 0) readonly buffer MatrixAIn {
    float a[];
}; // rows=h x cols=k
layout(std430, binding = 1) readonly buffer MatrixBIn {
    float b[];
}; // rows=k x cols=w
layout(std430, binding = 2) buffer MatrixCOut {
    float c[];
}; // rows=h x cols=w

layout(push_constant) uniform PushConstants {
    uint w;
    uint h;
    uint k;
} params;

shared float b_local[GROUP_SIZE_Y][GROUP_SIZE_X + 1];
shared float a_local[GROUP_SIZE_Y][GROUP_SIZE_X + 1];

layout(local_size_x = GROUP_SIZE_X, local_size_y = GROUP_SIZE_Y) in;
void main()
{
    // const uvec2 gi = gl_GlobalInvocationID.xy;
    // const uint index = gi.x + gi.y * params.w;
    // if (gi.x >= params.w || gi.y >= params.h) return;
    // float v = 0;
    // for (int i = 0; i < params.k; ++i) {
    //     v += a[i + gi.y * params.k] * b[gi.y + i * params.w];
    // }
    // c[index] = v;
    //

    const uint NK = params.k / 16u;

    const uvec2 li = gl_LocalInvocationID.xy;
    const uvec2 wi = gl_WorkGroupID.xy;

    const uint cy = wi.y * GROUP_SIZE_Y + li.y;
    const uint cx = wi.x * GROUP_SIZE_X + li.x;

    const uint bx = wi.x * GROUP_SIZE_X + li.x;
    const uint ay = wi.y * GROUP_SIZE_Y + li.y;

    const uint index = cx + params.w * cy;
    float acc = 0;

    for (uint i = 0; i < NK; ++i) {
        const uint by = i * GROUP_SIZE_Y + li.y;
        const uint wax = i * GROUP_SIZE_X;
        const uint ax = wax + li.x;

        if (bx < params.w && by < params.k) {
            b_local[li.y][li.x] = b[bx + params.w * by];
        } else {
            b_local[li.y][li.x] = 0;
        }

        if (ax < params.k && ay < params.h) {
            a_local[li.y][li.x] = a[ax + params.k * ay];
        } else {
            a_local[li.y][li.x] = 0;
        }

        barrier();
        float v = 0;

        #pragma unroll
        for (int j = 0; j < 16; ++j) {
            acc += a_local[li.y][j] * b_local[j][li.x];
        }
        barrier();
    }
    c[index] = acc;
}
