#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "../defines.h"

#define WARP_SIZE 32

layout (std430, binding = 0) readonly  buffer AsIn  { uint a[]; };
layout (std430, binding = 1) writeonly buffer BsOut { uint b[]; };

layout (push_constant) uniform PushConstants {
    uint n;
} params;

layout (local_size_x = GROUP_SIZE) in;

shared uint local_data[GROUP_SIZE];

void main()
{
    // Подсказки:
    // const uint index = gl_GlobalInvocationID.x;
    // const uint local_index = gl_LocalInvocationID.x;
    // локальная память объявлена выше (закомментировано)
    // memoryBarrierShared();
    // barrier();

    // TODO done

    const uint index = gl_GlobalInvocationID.x;
    const uint local_index = gl_LocalInvocationID.x;
    const uint group_index  = gl_WorkGroupID.x;

    uint value = 0;
    if (index < params.n) {
        value = a[index];
    }

    local_data[local_index] = value;
    barrier();

    if (local_index == 0) {
        uint block_sum = 0;
        for (uint k = 0; k < GROUP_SIZE; ++k) {
            block_sum += local_data[k];
        }
        b[group_index] = block_sum;
    }
}