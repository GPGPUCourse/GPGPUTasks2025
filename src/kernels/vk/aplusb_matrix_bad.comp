#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "../defines.h"

layout (std430, binding = 0) readonly	buffer AsIn		{	uint as[];	};
layout (std430, binding = 1) readonly	buffer BsIn		{	uint bs[];	};
layout (std430, binding = 2) writeonly	buffer CsOut	{	uint cs[];	};

layout (push_constant) uniform PushConstants {
	uint width;
    uint height;
} params;

layout (local_size_x = GROUP_SIZE/8, local_size_y = GROUP_SIZE/32) in;
void main()
{
    // все три массива - линейно выложенные двумерные матрицы размера width (число столбиков) x height (число рядов)
    // при этом в памяти подряд идут элементы являющимися соседями в рамках одного ряда,
    // т.е. матрица выложена в памяти линейно ряд за рядом
    // т.е. если в матрице сделать шаг вправо или влево на одну ячейку - то в памяти мы шагнем на 4 байта
    // т.е. если в матрице сделать шаг вверх или вниз на одну ячейку - то в памяти мы шагнем на так называемый stride=width*4 байта

    // TODO реализуйте этот кернел - просуммируйте две матрицы так чтобы получить максимально ПЛОХУЮ производительность с точки зрения memory coalesced паттерна доступа
    const uint x = gl_GlobalInvocationID.x;
    const uint y = gl_GlobalInvocationID.y;
    if (x >= params.width || y>=params.height)
        return;

    const uint index = y*params.width+ x;

    cs[index] = as[index] + bs[index];

}
