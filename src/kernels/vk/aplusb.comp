#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "../defines.h"

layout (std430, binding = 0) readonly	buffer AsIn		{	uint as[];	};
layout (std430, binding = 1) readonly	buffer BsIn		{	uint bs[];	};
layout (std430, binding = 2) writeonly	buffer CsOut	{	uint cs[];	};

layout (push_constant) uniform PushConstants {
	uint n;
} params;

layout (local_size_x = GROUP_SIZE) in;
void main()
{
	const uint index = gl_GlobalInvocationID.x;
	if (index >= params.n)
		return;

	if (index == 0) {
        // из кернела можно печатать текст в консоль, буфер для текста ограничен в размере,
        // кроме того в моделе массового параллелизма у нас обычно очень много workItems,
        // поэтому если каждый будет печатать сообщение - буфер быстро переполниться, а разобраться в сообщениях может быть тяжело
        // поэтому это сообщение выводится только для первого workItem (index == 0)
		//
		// Обратите внимание что debugPrintfEXT включен по умолчанию для Debug сборки и выключен для Release,
		// но он может быть включен для локальной разработки и в Release - см. common.vk
		// (обратите внимание что common.vk так же требует необходимое расширение: #extension GL_EXT_debug_printf : enable)
		// Необзодимо чтобы validation layers были включены, иначе debugPrintfEXT не заработает
		#if DEBUG_PRINTF_EXT_ENABLED
		debugPrintfEXT("Vulkan debugPrintfEXT test in aplusb.comp kernel! as[index]=%d bs[index]=%d \n", as[index], bs[index]);
		#endif
	}

	// rassert-ы - это способ легко проверить инвариант, если вдруг он будет нарушен - в консоль будет напечатан код этого инварианта
	// Не забудьте включить rassert в defines.h файле через RASSERT_ENABLED 1 (он выключен по умолчанию, не закомитьте случайно)
	// Попробуйте заполнить буферы в CPU коде другими значениями и запустить кернел - обнаружит ли он что инварианты нарушены?
	// В библиотеке которую мы используем есть встроенная поддержка rassert-ов, поэтому в отличии от OpenCL/CUDA этот код ошибки не будет спамиться всеми workItems
	rassert(as[index] == 3 * (index + 5) + 7, 435234223);
	rassert(bs[index] == 11 * (index + 13) + 17, 435432367);

	cs[index] = as[index] + bs[index];
}
