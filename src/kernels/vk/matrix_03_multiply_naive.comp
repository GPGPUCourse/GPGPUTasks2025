#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "../defines.h"

layout (std430, binding = 0) readonly buffer MatrixAIn   { float a[]; }; // rows=h x cols=k
layout (std430, binding = 1) readonly buffer MatrixBIn   { float b[]; }; // rows=k x cols=w
layout (std430, binding = 2)          buffer MatrixCOut  { float c[]; }; // rows=h x cols=w

layout (push_constant) uniform PushConstants {
    uint w;
    uint h;
    uint k;
} params;

layout (local_size_x = GROUP_SIZE_X, local_size_y = GROUP_SIZE_Y) in;
void main()
{
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;

    if (x >= params.w || y >= params.h) return;

    float sum = 0.0;
    for (uint i = 0; i < params.k; i++) {
        sum += a[y * params.k + i] * b[i * params.w + x];
    }

    c[y * params.w + x] = sum;
}
