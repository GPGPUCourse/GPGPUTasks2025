#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "../defines.h"

layout (std430, binding = 0) readonly buffer AsIn  { uint a[];   };
layout (std430, binding = 1)          buffer SumIO { uint sum[]; };

layout (push_constant) uniform PushConstants {
    uint n;
} params;

layout (local_size_x = GROUP_SIZE) in;

shared uint local_data[GROUP_SIZE];

void main()
{
    // Подсказки:
    // const uint index = gl_GlobalInvocationID.x;
    // const uint local_index = gl_LocalInvocationID.x;
    // локальная память объявлена выше (закомментировано)
    // memoryBarrierShared();
    // barrier();

    // TODO done

    const uint index = gl_GlobalInvocationID.x;
    const uint local_index = gl_LocalInvocationID.x;

    if (index >= params.n / LOAD_K_VALUES_PER_ITEM) {
        return;
    }

    local_data[local_index] = 0;

    for (uint i = 0; i < LOAD_K_VALUES_PER_ITEM; ++i) {
        local_data[local_index] += a[i * (params.n/LOAD_K_VALUES_PER_ITEM) + index];
    }

    memoryBarrierShared();
    barrier();

    if (local_index == 0) {
        uint group_sum = 0;
        uint threads_in_group = min(GROUP_SIZE, params.n / LOAD_K_VALUES_PER_ITEM - gl_WorkGroupID.x * GROUP_SIZE);
        for (uint i = 0; i < threads_in_group; i++) {
            group_sum += local_data[i];
        }
        atomicAdd(sum[0], group_sum);
    }
}