#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "../defines.h"

layout (std430, binding = 0) readonly buffer AsIn  { uint a[];   };
layout (std430, binding = 1)          buffer SumIO { uint sum[]; };

layout (push_constant) uniform PushConstants {
    uint n;
} params;

layout (local_size_x = GROUP_SIZE) in;

shared uint local_mem[GROUP_SIZE];

void main()
{
    // Подсказки:
    // const uint index = gl_GlobalInvocationID.x;
    // const uint local_index = gl_LocalInvocationID.x;
    // локальная память объявлена выше (закомментировано)
    // memoryBarrierShared();
    // barrier();


    const uint global_index = gl_GlobalInvocationID.x;
    const uint local_index = gl_LocalInvocationID.x;

    if (global_index < params.n) {
        local_mem[local_index] = a[global_index];
    } else {
        local_mem[local_index] = 0u;
    }

    memoryBarrierShared();
    barrier();

    if (local_index == 0u) {
        uint lsum = 0u;
        for (uint i = 0u; i < GROUP_SIZE; i++) {
            lsum += local_mem[i];
        }
        atomicAdd(sum[0], lsum);
    }
}
